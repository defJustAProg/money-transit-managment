services:
  webserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webserver
    entrypoint: ["/opt/app/entrypoint.sh"]
    ports:
      - "${APP_PORT}:8000"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=project.django.settings
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - ENGINE=${ENGINE}
    volumes:
      - ./config:/opt/app/config
      - ./manage.py:/opt/app/manage.py
      - ./media:/opt/app/media
      - ./logs:/opt/app/logs
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  postgres:
    image: postgres:17
    container_name: postgres
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "/usr/bin/pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  pgdata:
networks:
  backend:
    name: backend
    driver: bridge
